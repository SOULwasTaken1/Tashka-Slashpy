# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import project_pb2 as project__pb2


class ProjectServiceStub(object):
    """
    gRPC services

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/gooseai.ProjectService/Create',
                request_serializer=project__pb2.CreateProjectRequest.SerializeToString,
                response_deserializer=project__pb2.Project.FromString,
                )
        self.Update = channel.unary_unary(
                '/gooseai.ProjectService/Update',
                request_serializer=project__pb2.UpdateProjectRequest.SerializeToString,
                response_deserializer=project__pb2.Project.FromString,
                )
        self.List = channel.unary_stream(
                '/gooseai.ProjectService/List',
                request_serializer=project__pb2.ListProjectRequest.SerializeToString,
                response_deserializer=project__pb2.Project.FromString,
                )
        self.Get = channel.unary_unary(
                '/gooseai.ProjectService/Get',
                request_serializer=project__pb2.GetProjectRequest.SerializeToString,
                response_deserializer=project__pb2.Project.FromString,
                )
        self.Delete = channel.unary_unary(
                '/gooseai.ProjectService/Delete',
                request_serializer=project__pb2.DeleteProjectRequest.SerializeToString,
                response_deserializer=project__pb2.Project.FromString,
                )
        self.TagAssets = channel.unary_unary(
                '/gooseai.ProjectService/TagAssets',
                request_serializer=project__pb2.TagAssetsRequest.SerializeToString,
                response_deserializer=project__pb2.TagAssetsResponse.FromString,
                )
        self.UntagAssets = channel.unary_unary(
                '/gooseai.ProjectService/UntagAssets',
                request_serializer=project__pb2.UntagAssetsRequest.SerializeToString,
                response_deserializer=project__pb2.UntagAssetsResponse.FromString,
                )
        self.QueryAssets = channel.unary_unary(
                '/gooseai.ProjectService/QueryAssets',
                request_serializer=project__pb2.QueryAssetsRequest.SerializeToString,
                response_deserializer=project__pb2.QueryAssetsResponse.FromString,
                )
        self.DeleteAssets = channel.unary_unary(
                '/gooseai.ProjectService/DeleteAssets',
                request_serializer=project__pb2.DeleteAssetsRequest.SerializeToString,
                response_deserializer=project__pb2.DeleteAssetsResponse.FromString,
                )


class ProjectServiceServicer(object):
    """
    gRPC services

    """

    def Create(self, request, context):
        """Create a new project if it does not exist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Update an existing project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """List all the projects for an organization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TagAssets(self, request, context):
        """Add or remove tags from an asset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UntagAssets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAssets(self, request, context):
        """Query the assets of a project, with additional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAssets(self, request, context):
        """Delete one or more assets of a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=project__pb2.CreateProjectRequest.FromString,
                    response_serializer=project__pb2.Project.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=project__pb2.UpdateProjectRequest.FromString,
                    response_serializer=project__pb2.Project.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=project__pb2.ListProjectRequest.FromString,
                    response_serializer=project__pb2.Project.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=project__pb2.GetProjectRequest.FromString,
                    response_serializer=project__pb2.Project.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=project__pb2.DeleteProjectRequest.FromString,
                    response_serializer=project__pb2.Project.SerializeToString,
            ),
            'TagAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.TagAssets,
                    request_deserializer=project__pb2.TagAssetsRequest.FromString,
                    response_serializer=project__pb2.TagAssetsResponse.SerializeToString,
            ),
            'UntagAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.UntagAssets,
                    request_deserializer=project__pb2.UntagAssetsRequest.FromString,
                    response_serializer=project__pb2.UntagAssetsResponse.SerializeToString,
            ),
            'QueryAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAssets,
                    request_deserializer=project__pb2.QueryAssetsRequest.FromString,
                    response_serializer=project__pb2.QueryAssetsResponse.SerializeToString,
            ),
            'DeleteAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAssets,
                    request_deserializer=project__pb2.DeleteAssetsRequest.FromString,
                    response_serializer=project__pb2.DeleteAssetsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gooseai.ProjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProjectService(object):
    """
    gRPC services

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/Create',
            project__pb2.CreateProjectRequest.SerializeToString,
            project__pb2.Project.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/Update',
            project__pb2.UpdateProjectRequest.SerializeToString,
            project__pb2.Project.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gooseai.ProjectService/List',
            project__pb2.ListProjectRequest.SerializeToString,
            project__pb2.Project.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/Get',
            project__pb2.GetProjectRequest.SerializeToString,
            project__pb2.Project.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/Delete',
            project__pb2.DeleteProjectRequest.SerializeToString,
            project__pb2.Project.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TagAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/TagAssets',
            project__pb2.TagAssetsRequest.SerializeToString,
            project__pb2.TagAssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UntagAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/UntagAssets',
            project__pb2.UntagAssetsRequest.SerializeToString,
            project__pb2.UntagAssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/QueryAssets',
            project__pb2.QueryAssetsRequest.SerializeToString,
            project__pb2.QueryAssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.ProjectService/DeleteAssets',
            project__pb2.DeleteAssetsRequest.SerializeToString,
            project__pb2.DeleteAssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
